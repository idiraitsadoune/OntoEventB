/**
 * generated by Xtext 2.25.0
 */
package fr.cs.ontoeventb.pivotmodel.formatting2;

import com.google.inject.Inject;
import fr.cs.ontoeventb.pivotmodel.services.DSLGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import pivotmodel.ClassDefinition;
import pivotmodel.DataTypeDefinition;
import pivotmodel.MeasureType;
import pivotmodel.Ontology;
import pivotmodel.PropertyDefinition;
import pivotmodel.UnitType;

@SuppressWarnings("all")
public class DSLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DSLGrammarAccess _dSLGrammarAccess;
  
  protected void _format(final Ontology ontology, @Extension final IFormattableDocument document) {
    EList<ClassDefinition> _containedClasses = ontology.getContainedClasses();
    for (final ClassDefinition classDefinition : _containedClasses) {
      document.<ClassDefinition>format(classDefinition);
    }
    EList<PropertyDefinition> _containedProperties = ontology.getContainedProperties();
    for (final PropertyDefinition propertyDefinition : _containedProperties) {
      document.<PropertyDefinition>format(propertyDefinition);
    }
    EList<DataTypeDefinition> _containedDataTypes = ontology.getContainedDataTypes();
    for (final DataTypeDefinition dataTypeDefinition : _containedDataTypes) {
      document.<DataTypeDefinition>format(dataTypeDefinition);
    }
  }
  
  protected void _format(final MeasureType measureType, @Extension final IFormattableDocument document) {
    document.<UnitType>format(measureType.getUnit());
  }
  
  public void format(final Object measureType, final IFormattableDocument document) {
    if (measureType instanceof MeasureType) {
      _format((MeasureType)measureType, document);
      return;
    } else if (measureType instanceof XtextResource) {
      _format((XtextResource)measureType, document);
      return;
    } else if (measureType instanceof Ontology) {
      _format((Ontology)measureType, document);
      return;
    } else if (measureType instanceof EObject) {
      _format((EObject)measureType, document);
      return;
    } else if (measureType == null) {
      _format((Void)null, document);
      return;
    } else if (measureType != null) {
      _format(measureType, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(measureType, document).toString());
    }
  }
}
