// automatically generated by Xtext
grammar fr.cs.ontoeventb.pivotmodel.DSL with org.eclipse.xtext.common.Terminals

import "http://PM/" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Ontology returns Ontology:
	{Ontology}
	'Ontology'
	name=EString
	'{'
		('containedClasses' '{' containedClasses+=ClassDefinition ( "," containedClasses+=ClassDefinition)* '}' )?
		('containedProperties' '{' containedProperties+=PropertyDefinition ( "," containedProperties+=PropertyDefinition)* '}' )?
		('containedDataTypes' '{' containedDataTypes+=DataTypeDefinition ( "," containedDataTypes+=DataTypeDefinition)* '}' )?
	'}';

ClassDefinition returns ClassDefinition:
	SimpleClass | CaseOfClass | UniversalClass | ExistantialClass | HasValueClass | MaxCardinalityClass | MinCardinalityClass | CardinalityClass | EnumeratedClass | UnionClass | IntersectionClass | ComplementClass;

PropertyDefinition returns PropertyDefinition:
	SimpleProperty | ConditionProperty | DependentProperty;

DataTypeDefinition returns DataTypeDefinition:
	NotNumericType | NumericType_Impl | MeasureType | CurrencyType | ClassType | CollectionType | SingleValue | EnumeratedType | NumberEnumeratedType;


UnitType returns UnitType:
	NamedUnit_Impl | DerivedUnit | NonStandardUnit | ConversionBasedUnit | ContextDependentUnit | StandardUnit;


NamedUnit returns NamedUnit:
	NamedUnit_Impl | NonStandardUnit | ConversionBasedUnit | ContextDependentUnit | StandardUnit;

EString returns ecore::EString:
	STRING | ID;

SimpleClass returns SimpleClass:
	{SimpleClass}
	'SimpleClass'
	name=EString
	'{'
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
	'}';

CaseOfClass returns CaseOfClass:
	'CaseOfClass'
	name=EString
	'{'
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
		'caseOf' '(' caseOf+=[ClassDefinition|EString] ( "," caseOf+=[ClassDefinition|EString])* ')' 
		('importedProperties' '(' importedProperties+=[PropertyDefinition|EString] ( "," importedProperties+=[PropertyDefinition|EString])* ')' )?
	'}';

UniversalClass returns UniversalClass:
	'UniversalClass'
	name=EString
	'{'
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
		'onProperty' onProperty=[PropertyDefinition|EString]
		'toDataDefinition' toDataDefinition=[DataTypeDefinition|EString]
	'}';

ExistantialClass returns ExistantialClass:
	'ExistantialClass'
	name=EString
	'{'
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
		'onProperty' onProperty=[PropertyDefinition|EString]
		'toDataDefinition' toDataDefinition=[DataTypeDefinition|EString]
	'}';

HasValueClass returns HasValueClass:
	'HasValueClass'
	name=EString
	'{'
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
		'onProperty' onProperty=[PropertyDefinition|EString]
		'toDataDefinition' toDataDefinition=[DataTypeDefinition|EString]
	'}';

MaxCardinalityClass returns MaxCardinalityClass:
	'MaxCardinalityClass'
	name=EString
	'{'
		'maxCard' maxCard=EInt
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
		'onProperty' onProperty=[PropertyDefinition|EString]
	'}';

MinCardinalityClass returns MinCardinalityClass:
	'MinCardinalityClass'
	name=EString
	'{'
		'minCard' minCard=EInt
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
		'onProperty' onProperty=[PropertyDefinition|EString]
	'}';

CardinalityClass returns CardinalityClass:
	'CardinalityClass'
	name=EString
	'{'
		'card' card=EInt
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
		'onProperty' onProperty=[PropertyDefinition|EString]
	'}';

EnumeratedClass returns EnumeratedClass:
	'EnumeratedClass'
	name=EString
	'{'
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
		'oneOf' '(' oneOf+=[SingleValue|EString] ( "," oneOf+=[SingleValue|EString])* ')' 
	'}';

UnionClass returns UnionClass:
	'UnionClass'
	name=EString
	'{'
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
		'combinationOf' '(' combinationOf+=[ClassDefinition|EString] ( "," combinationOf+=[ClassDefinition|EString])* ')' 
	'}';

IntersectionClass returns IntersectionClass:
	'IntersectionClass'
	name=EString
	'{'
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
		'combinationOf' '(' combinationOf+=[ClassDefinition|EString] ( "," combinationOf+=[ClassDefinition|EString])* ')' 
	'}';

ComplementClass returns ComplementClass:
	'ComplementClass'
	name=EString
	'{'
		('subClassOf' '(' subClassOf+=[ClassDefinition|EString] ( "," subClassOf+=[ClassDefinition|EString])* ')' )?
		('disjointWith' '(' disjointWith+=[ClassDefinition|EString] ( "," disjointWith+=[ClassDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[ClassDefinition|EString] ( "," equivalentTo+=[ClassDefinition|EString])* ')' )?
		('describedBy' '(' describedBy+=[PropertyDefinition|EString] ( "," describedBy+=[PropertyDefinition|EString])* ')' )?
		'combinationOf' '(' combinationOf+=[ClassDefinition|EString] ( "," combinationOf+=[ClassDefinition|EString])* ')' 
	'}';

EInt returns ecore::EInt:
	'-'? INT;

SingleValue returns SingleValue:
	'SingleValue'
	name=EString
	'{'
		'isOfType' isOfType=[DataTypeDefinition|EString]
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

SimpleProperty returns SimpleProperty:
	{SimpleProperty}
	(isFunctional?='isFunctional')?
	(isSymmetric?='isSymmetric')?
	(isTransitive?='isTransitive')?
	(isInverseFunctional?='isInverseFunctional')?
	'SimpleProperty'
	name=EString
	'{'
		('range' range=[DataTypeDefinition|EString])?
		('subPropertyOf' '(' subPropertyOf+=[PropertyDefinition|EString] ( "," subPropertyOf+=[PropertyDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[PropertyDefinition|EString] ( "," equivalentTo+=[PropertyDefinition|EString])* ')' )?
		('inverseOf' '(' inverseOf+=[PropertyDefinition|EString] ( "," inverseOf+=[PropertyDefinition|EString])* ')' )?
		('domain' domain=[ClassDefinition|EString])?
	'}';

ConditionProperty returns ConditionProperty:
	{ConditionProperty}
	(isFunctional?='isFunctional')?
	(isSymmetric?='isSymmetric')?
	(isTransitive?='isTransitive')?
	(isInverseFunctional?='isInverseFunctional')?
	'ConditionProperty'
	name=EString
	'{'
		('range' range=[DataTypeDefinition|EString])?
		('subPropertyOf' '(' subPropertyOf+=[PropertyDefinition|EString] ( "," subPropertyOf+=[PropertyDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[PropertyDefinition|EString] ( "," equivalentTo+=[PropertyDefinition|EString])* ')' )?
		('inverseOf' '(' inverseOf+=[PropertyDefinition|EString] ( "," inverseOf+=[PropertyDefinition|EString])* ')' )?
		('domain' domain=[ClassDefinition|EString])?
	'}';

DependentProperty returns DependentProperty:
	(isFunctional?='isFunctional')?
	(isSymmetric?='isSymmetric')?
	(isTransitive?='isTransitive')?
	(isInverseFunctional?='isInverseFunctional')?
	'DependentProperty'
	name=EString
	'{'
		('range' range=[DataTypeDefinition|EString])?
		('subPropertyOf' '(' subPropertyOf+=[PropertyDefinition|EString] ( "," subPropertyOf+=[PropertyDefinition|EString])* ')' )?
		('equivalentTo' '(' equivalentTo+=[PropertyDefinition|EString] ( "," equivalentTo+=[PropertyDefinition|EString])* ')' )?
		('inverseOf' '(' inverseOf+=[PropertyDefinition|EString] ( "," inverseOf+=[PropertyDefinition|EString])* ')' )?
		('domain' domain=[ClassDefinition|EString])?
		'dependsOn' '(' dependsOn+=[PropertyDefinition|EString] ( "," dependsOn+=[PropertyDefinition|EString])* ')' 
	'}';

NotNumericType returns NotNumericType:
	'NotNumericType'
	name=EString
	'{'
		'basedOn' basedOn=PredefinedType
	'}';

NumericType_Impl returns NumericType:
	'NumericType'
	name=EString
	'{'
		'basedOn' basedOn=PredefinedType
	'}';

MeasureType returns MeasureType:
	'MeasureType'
	name=EString
	'{'
		'basedOn' basedOn=PredefinedType
		'unit' unit=UnitType
	'}';

CurrencyType returns CurrencyType:
	'CurrencyType'
	name=EString
	'{'
		'basedOn' basedOn=PredefinedType
		'currency' currency=PredefinedCurrency
	'}';

ClassType returns ClassType:
	'ClassType'
	name=EString
	'{'
		'basedOn' basedOn=[ClassDefinition|EString]
	'}';

CollectionType returns CollectionType:
	'CollectionType'
	name=EString
	'{'
		'is' is=PredefinedCollection
		'collectionOf' collectionOf=[DataTypeDefinition|EString]
	'}';

EnumeratedType returns EnumeratedType:
	'EnumeratedType'
	name=EString
	'{'
		'contains' '(' contains+=[SingleValue|EString] ( "," contains+=[SingleValue|EString])* ')' 
	'}';

NumberEnumeratedType returns NumberEnumeratedType:
	'NumberEnumeratedType'
	name=EString
	'{'
		'contains' '{' contains+=EInt ( "," contains+=EInt)* '}' 
	'}';

enum PredefinedType returns PredefinedType:
				INTEGER = 'INTEGER' | NATURAL = 'NATURAL' | BOOLEAN = 'BOOLEAN' | STRING = 'STRING';

NamedUnit_Impl returns NamedUnit:
	{NamedUnit}
	'NamedUnit'
	'{'
		('exponent' exponent=EInt)?
	'}';

DerivedUnit returns DerivedUnit:
	'DerivedUnit'
	'{'
		'derivedUnitElement' '{' derivedUnitElement+=DerivedUnitElement ( "," derivedUnitElement+=DerivedUnitElement)* '}' 
	'}';

NonStandardUnit returns NonStandardUnit:
	{NonStandardUnit}
	'NonStandardUnit'
	name=EString
	'{'
		('exponent' exponent=EInt)?
	'}';

ConversionBasedUnit returns ConversionBasedUnit:
	'ConversionBasedUnit'
	name=EString
	'{'
		('exponent' exponent=EInt)?
		'valueComponent' valueComponent=EInt
		'unitComponent' unitComponent=[UnitType|EString]
	'}';

ContextDependentUnit returns ContextDependentUnit:
	{ContextDependentUnit}
	'ContextDependentUnit'
	name=EString
	'{'
		('exponent' exponent=EInt)?
	'}';

StandardUnit returns StandardUnit:
	'StandardUnit'
	'{'
		('exponent' exponent=EInt)?
		('prefix' prefix=PrefixeType)?
		'name' name=UnitName
	'}';

DerivedUnitElement returns DerivedUnitElement:
	'DerivedUnitElement'
	name=EString
	'{'
		('exponent' exponent=EInt)?
		'unit' unit=[NamedUnit|EString]
	'}';

enum PrefixeType returns PrefixeType:
				EXA = 'EXA' | PETA = 'PETA' | TERA = 'TERA' | GIGA = 'GIGA' | MEGA = 'MEGA' | KILO = 'KILO' | HECTO = 'HECTO' | DECA = 'DECA' | DECI = 'DECI' | CENTI = 'CENTI' | MILLI = 'MILLI' | MICRO = 'MICRO' | NANO = 'NANO' | PICO = 'PICO' | FEMTO = 'FEMTO' | ATTO = 'ATTO';

enum UnitName returns UnitName:
				METRE = 'METRE' | GRAM = 'GRAM' | SECOND = 'SECOND' | AMPERE = 'AMPERE' | KELVIN = 'KELVIN' | MOLE = 'MOLE' | CANDELA = 'CANDELA' | RADIAN = 'RADIAN' | STERADIAN = 'STERADIAN' | HERTZ = 'HERTZ' | NEWTON = 'NEWTON' | PASCAL = 'PASCAL' | JOULE = 'JOULE' | WATT = 'WATT' | COULOMB = 'COULOMB' | VOLT = 'VOLT' | FARAD = 'FARAD' | OHM = 'OHM' | SIEMENS = 'SIEMENS' | WEBER = 'WEBER' | TESLA = 'TESLA' | HENRY = 'HENRY' | DEGREE_CELSIUS = 'DEGREE_CELSIUS' | LUMEN = 'LUMEN' | LUX = 'LUX' | BECQUEREL = 'BECQUEREL' | GRAY = 'GRAY' | SIEVERT = 'SIEVERT';

enum PredefinedCurrency returns PredefinedCurrency:
				EUR = 'EUR' | USD = 'USD' | SUR = 'SUR' | JPY = 'JPY' | CNY = 'CNY' | CHF = 'CHF';

enum PredefinedCollection returns PredefinedCollection:
				ARRAY = 'ARRAY' | SET = 'SET' | BAG = 'BAG' | LIST = 'LIST';
